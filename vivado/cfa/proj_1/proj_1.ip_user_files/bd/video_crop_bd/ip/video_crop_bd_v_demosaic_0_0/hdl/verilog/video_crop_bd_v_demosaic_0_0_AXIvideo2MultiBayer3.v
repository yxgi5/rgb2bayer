// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module video_crop_bd_v_demosaic_0_0_AXIvideo2MultiBayer3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        imgBayer_V_val_0_V_din,
        imgBayer_V_val_0_V_full_n,
        imgBayer_V_val_0_V_write,
        imgBayer_V_val_1_V_din,
        imgBayer_V_val_1_V_full_n,
        imgBayer_V_val_1_V_write,
        HwReg_height,
        HwReg_width,
        HwReg_bayer_phase,
        HwReg_bayer_phase_c_din,
        HwReg_bayer_phase_c_full_n,
        HwReg_bayer_phase_c_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [1:0] s_axis_video_TKEEP;
input  [1:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] imgBayer_V_val_0_V_din;
input   imgBayer_V_val_0_V_full_n;
output   imgBayer_V_val_0_V_write;
output  [7:0] imgBayer_V_val_1_V_din;
input   imgBayer_V_val_1_V_full_n;
output   imgBayer_V_val_1_V_write;
input  [15:0] HwReg_height;
input  [15:0] HwReg_width;
input  [15:0] HwReg_bayer_phase;
output  [15:0] HwReg_bayer_phase_c_din;
input   HwReg_bayer_phase_c_full_n;
output   HwReg_bayer_phase_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg HwReg_bayer_phase_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [15:0] s_axis_video_V_data_V_0_data_out;
wire    s_axis_video_V_data_V_0_vld_in;
wire    s_axis_video_V_data_V_0_vld_out;
wire    s_axis_video_V_data_V_0_ack_in;
reg    s_axis_video_V_data_V_0_ack_out;
reg   [15:0] s_axis_video_V_data_V_0_payload_A;
reg   [15:0] s_axis_video_V_data_V_0_payload_B;
reg    s_axis_video_V_data_V_0_sel_rd;
reg    s_axis_video_V_data_V_0_sel_wr;
wire    s_axis_video_V_data_V_0_sel;
wire    s_axis_video_V_data_V_0_load_A;
wire    s_axis_video_V_data_V_0_load_B;
reg   [1:0] s_axis_video_V_data_V_0_state;
wire    s_axis_video_V_data_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_user_V_0_data_out;
wire    s_axis_video_V_user_V_0_vld_in;
wire    s_axis_video_V_user_V_0_vld_out;
wire    s_axis_video_V_user_V_0_ack_in;
reg    s_axis_video_V_user_V_0_ack_out;
reg   [0:0] s_axis_video_V_user_V_0_payload_A;
reg   [0:0] s_axis_video_V_user_V_0_payload_B;
reg    s_axis_video_V_user_V_0_sel_rd;
reg    s_axis_video_V_user_V_0_sel_wr;
wire    s_axis_video_V_user_V_0_sel;
wire    s_axis_video_V_user_V_0_load_A;
wire    s_axis_video_V_user_V_0_load_B;
reg   [1:0] s_axis_video_V_user_V_0_state;
wire    s_axis_video_V_user_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_last_V_0_data_out;
wire    s_axis_video_V_last_V_0_vld_in;
wire    s_axis_video_V_last_V_0_vld_out;
wire    s_axis_video_V_last_V_0_ack_in;
reg    s_axis_video_V_last_V_0_ack_out;
reg   [0:0] s_axis_video_V_last_V_0_payload_A;
reg   [0:0] s_axis_video_V_last_V_0_payload_B;
reg    s_axis_video_V_last_V_0_sel_rd;
reg    s_axis_video_V_last_V_0_sel_wr;
wire    s_axis_video_V_last_V_0_sel;
wire    s_axis_video_V_last_V_0_load_A;
wire    s_axis_video_V_last_V_0_load_B;
reg   [1:0] s_axis_video_V_last_V_0_state;
wire    s_axis_video_V_last_V_0_state_cmp_full;
wire    s_axis_video_V_dest_V_0_vld_in;
reg    s_axis_video_V_dest_V_0_ack_out;
reg   [1:0] s_axis_video_V_dest_V_0_state;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] exitcond_i_fu_388_p2;
wire   [0:0] brmerge_i_i_i_i_fu_402_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] ap_phi_mux_eol_2_i_i_i_i_phi_fu_322_p4;
reg    imgBayer_V_val_0_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond_i_reg_481;
reg    imgBayer_V_val_1_V_blk_n;
reg    HwReg_bayer_phase_c_blk_n;
wire    ap_CS_fsm_state2;
reg   [0:0] eol_reg_225;
reg   [15:0] axi_data_V_1_i_i_i_i_reg_236;
reg   [0:0] eol_i_i_i_i_reg_247;
reg   [10:0] j_i_i_i_i_reg_259;
reg   [0:0] axi_last_V_2_i_i_i_i_reg_270;
reg   [15:0] p_Val2_s_reg_283;
reg    ap_block_state1;
wire   [11:0] grp_reg_unsigned_short_s_fu_347_ap_return;
reg   [11:0] tmp_i_i_i_i_reg_437;
wire    grp_reg_unsigned_short_s_fu_347_ap_ready;
wire    grp_reg_unsigned_short_s_fu_347_ap_done;
wire    grp_reg_unsigned_short_s_fu_353_ap_ready;
wire    grp_reg_unsigned_short_s_fu_353_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [11:0] grp_reg_unsigned_short_s_fu_353_ap_return;
reg   [11:0] tmp_i_i_i_i_187_reg_442;
reg   [15:0] tmp_data_V_reg_447;
reg   [0:0] tmp_last_V_reg_455;
reg   [10:0] tmp_i_reg_467;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_i_i_i_i_fu_377_p2;
wire    ap_CS_fsm_state5;
wire   [11:0] i_fu_382_p2;
reg   [11:0] i_reg_476;
reg    ap_predicate_op125_read_state6;
reg    ap_block_state6_pp1_stage0_iter0;
wire    imgBayer_V_val_0_V1_status;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_fu_393_p2;
wire   [7:0] tmp_val_0_V_fu_408_p1;
reg   [7:0] tmp_val_0_V_reg_494;
reg   [7:0] tmp_val_1_V_reg_499;
reg    ap_block_state9;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    grp_reg_unsigned_short_s_fu_347_ap_start;
wire    grp_reg_unsigned_short_s_fu_347_ap_idle;
wire   [11:0] grp_reg_unsigned_short_s_fu_347_in_r;
wire    grp_reg_unsigned_short_s_fu_353_ap_start;
wire    grp_reg_unsigned_short_s_fu_353_ap_idle;
wire   [11:0] grp_reg_unsigned_short_s_fu_353_in_r;
reg   [0:0] axi_last_V1_i_i_i_i_reg_194;
reg   [0:0] axi_last_V_3_i_i_i_i_reg_295;
wire    ap_CS_fsm_state10;
reg   [15:0] axi_data_V1_i_i_i_i_reg_204;
reg   [15:0] axi_data_V_3_i_i_i_i_reg_307;
reg   [11:0] i_i_i_i_i_reg_214;
reg   [0:0] ap_phi_mux_eol_phi_fu_228_p4;
reg   [15:0] ap_phi_mux_axi_data_V_1_i_i_i_i_phi_fu_239_p4;
reg   [0:0] ap_phi_mux_eol_i_i_i_i_phi_fu_251_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_2_i_i_i_i_reg_270;
reg   [15:0] ap_phi_mux_p_Val2_s_phi_fu_287_p4;
wire   [15:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_283;
wire    ap_CS_fsm_state8;
reg   [0:0] eol_2_i_i_i_i_reg_319;
reg    grp_reg_unsigned_short_s_fu_347_ap_start_reg;
reg    ap_block_state1_ignore_call73;
reg    grp_reg_unsigned_short_s_fu_353_ap_start_reg;
reg    ap_block_state1_ignore_call74;
reg    imgBayer_V_val_0_V1_update;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_i_i_i_i_fu_136;
wire   [0:0] tmp_user_V_fu_359_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_687;
reg    ap_condition_596;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 s_axis_video_V_data_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_data_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_data_V_0_state = 2'd0;
#0 s_axis_video_V_user_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_user_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_user_V_0_state = 2'd0;
#0 s_axis_video_V_last_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_last_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_last_V_0_state = 2'd0;
#0 s_axis_video_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_347_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_353_ap_start_reg = 1'b0;
end

video_crop_bd_v_demosaic_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_347(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_347_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_347_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_347_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_347_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_347_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_347_ap_return)
);

video_crop_bd_v_demosaic_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_353(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_353_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_353_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_353_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_353_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_353_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_353_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_i_i_i_i_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond_i_i_i_i_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((exitcond_i_i_i_i_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_347_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_347_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_347_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_347_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_353_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_353_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_353_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_353_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_out == 1'b1) & (s_axis_video_V_data_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_rd <= ~s_axis_video_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_in == 1'b1) & (s_axis_video_V_data_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_wr <= ~s_axis_video_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)) & (s_axis_video_V_data_V_0_state == 2'd3)) | ((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) | ((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)) & (s_axis_video_V_dest_V_0_state == 2'd3)) | ((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) | ((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_out == 1'b1) & (s_axis_video_V_last_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_rd <= ~s_axis_video_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_in == 1'b1) & (s_axis_video_V_last_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_wr <= ~s_axis_video_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)) & (s_axis_video_V_last_V_0_state == 2'd3)) | ((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) | ((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_out == 1'b1) & (s_axis_video_V_user_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_rd <= ~s_axis_video_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_in == 1'b1) & (s_axis_video_V_user_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_wr <= ~s_axis_video_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)) & (s_axis_video_V_user_V_0_state == 2'd3)) | ((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) | ((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V1_i_i_i_i_reg_204 <= axi_data_V_3_i_i_i_i_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_data_V1_i_i_i_i_reg_204 <= tmp_data_V_reg_447;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_1_i_i_i_i_reg_236 <= p_Val2_s_reg_283;
    end else if (((exitcond_i_i_i_i_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        axi_data_V_1_i_i_i_i_reg_236 <= axi_data_V1_i_i_i_i_reg_204;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_3_i_i_i_i_reg_307 <= axi_data_V_1_i_i_i_i_reg_236;
    end else if ((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_data_V_3_i_i_i_i_reg_307 <= s_axis_video_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V1_i_i_i_i_reg_194 <= axi_last_V_3_i_i_i_i_reg_295;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_last_V1_i_i_i_i_reg_194 <= tmp_last_V_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_596)) begin
        if (((brmerge_i_i_i_i_fu_402_p2 == 1'd1) & (exitcond_i_fu_388_p2 == 1'd0))) begin
            axi_last_V_2_i_i_i_i_reg_270 <= ap_phi_mux_eol_phi_fu_228_p4;
        end else if (((brmerge_i_i_i_i_fu_402_p2 == 1'd0) & (exitcond_i_fu_388_p2 == 1'd0))) begin
            axi_last_V_2_i_i_i_i_reg_270 <= s_axis_video_V_last_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_2_i_i_i_i_reg_270 <= ap_phi_reg_pp1_iter0_axi_last_V_2_i_i_i_i_reg_270;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_3_i_i_i_i_reg_295 <= eol_reg_225;
    end else if ((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_last_V_3_i_i_i_i_reg_295 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_2_i_i_i_i_reg_319 <= eol_i_i_i_i_reg_247;
    end else if ((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        eol_2_i_i_i_i_reg_319 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_i_i_i_i_reg_247 <= axi_last_V_2_i_i_i_i_reg_270;
    end else if (((exitcond_i_i_i_i_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_i_i_i_i_reg_247 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_225 <= axi_last_V_2_i_i_i_i_reg_270;
    end else if (((exitcond_i_i_i_i_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_reg_225 <= axi_last_V1_i_i_i_i_reg_194;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_i_i_i_i_reg_214 <= i_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_i_i_i_reg_214 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_i_i_i_i_reg_259 <= j_fu_393_p2;
    end else if (((exitcond_i_i_i_i_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_i_i_i_i_reg_259 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_596)) begin
        if (((brmerge_i_i_i_i_fu_402_p2 == 1'd1) & (exitcond_i_fu_388_p2 == 1'd0))) begin
            p_Val2_s_reg_283 <= ap_phi_mux_axi_data_V_1_i_i_i_i_phi_fu_239_p4;
        end else if (((brmerge_i_i_i_i_fu_402_p2 == 1'd0) & (exitcond_i_fu_388_p2 == 1'd0))) begin
            p_Val2_s_reg_283 <= s_axis_video_V_data_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_283 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_283;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_i_i_i_i_fu_136 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_1_i_i_i_i_fu_136 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_i_reg_481 <= exitcond_i_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_476 <= i_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_A == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_B == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_A == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_B == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_A == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_B == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_reg_447 <= s_axis_video_V_data_V_0_data_out;
        tmp_last_V_reg_455 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == HwReg_bayer_phase_c_full_n) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_i_i_i_i_187_reg_442 <= grp_reg_unsigned_short_s_fu_353_ap_return;
        tmp_i_i_i_i_reg_437 <= grp_reg_unsigned_short_s_fu_347_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_i_reg_467 <= {{tmp_i_i_i_i_187_reg_442[11:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_val_0_V_reg_494 <= tmp_val_0_V_fu_408_p1;
        tmp_val_1_V_reg_499 <= {{ap_phi_mux_p_Val2_s_phi_fu_287_p4[15:8]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        HwReg_bayer_phase_c_blk_n = HwReg_bayer_phase_c_full_n;
    end else begin
        HwReg_bayer_phase_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_bayer_phase_c_full_n) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        HwReg_bayer_phase_c_write = 1'b1;
    end else begin
        HwReg_bayer_phase_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_388_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_i_i_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_1_i_i_i_i_phi_fu_239_p4 = p_Val2_s_reg_283;
    end else begin
        ap_phi_mux_axi_data_V_1_i_i_i_i_phi_fu_239_p4 = axi_data_V_1_i_i_i_i_reg_236;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_i_i_i_i_phi_fu_251_p4 = axi_last_V_2_i_i_i_i_reg_270;
    end else begin
        ap_phi_mux_eol_i_i_i_i_phi_fu_251_p4 = eol_i_i_i_i_reg_247;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_228_p4 = axi_last_V_2_i_i_i_i_reg_270;
    end else begin
        ap_phi_mux_eol_phi_fu_228_p4 = eol_reg_225;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_687)) begin
        if ((brmerge_i_i_i_i_fu_402_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_287_p4 = ap_phi_mux_axi_data_V_1_i_i_i_i_phi_fu_239_p4;
        end else if ((brmerge_i_i_i_i_fu_402_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_287_p4 = s_axis_video_V_data_V_0_data_out;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_287_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_283;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_287_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_283;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        imgBayer_V_val_0_V1_update = 1'b1;
    end else begin
        imgBayer_V_val_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        imgBayer_V_val_0_V_blk_n = imgBayer_V_val_0_V_full_n;
    end else begin
        imgBayer_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        imgBayer_V_val_1_V_blk_n = imgBayer_V_val_1_V_full_n;
    end else begin
        imgBayer_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_i_i_i_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((brmerge_i_i_i_i_fu_402_p2 == 1'd0) & (exitcond_i_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_V_data_V_0_state[1'd0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op125_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_data_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_data_V_0_sel == 1'b1)) begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_B;
    end else begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op125_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_dest_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op125_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_last_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_last_V_0_sel == 1'b1)) begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_B;
    end else begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op125_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_user_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_user_V_0_sel == 1'b1)) begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_B;
    end else begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == HwReg_bayer_phase_c_full_n) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_user_V_fu_359_p1 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((tmp_user_V_fu_359_p1 == 1'd1) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_i_i_i_i_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((exitcond_i_fu_388_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((exitcond_i_fu_388_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_i_reg_319 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (ap_phi_mux_eol_2_i_i_i_i_phi_fu_322_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_bayer_phase_c_din = HwReg_bayer_phase;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((exitcond_i_reg_481 == 1'd0) & (imgBayer_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op125_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((exitcond_i_reg_481 == 1'd0) & (imgBayer_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op125_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((exitcond_i_reg_481 == 1'd0) & (imgBayer_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op125_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call73 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call74 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_353_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_347_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op125_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((exitcond_i_reg_481 == 1'd0) & (imgBayer_V_val_0_V1_status == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((eol_2_i_i_i_i_reg_319 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_condition_596 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_687 = ((exitcond_i_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_i_i_i_i_phi_fu_322_p4 = eol_2_i_i_i_i_reg_319;

assign ap_phi_reg_pp1_iter0_axi_last_V_2_i_i_i_i_reg_270 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_283 = 'bx;

always @ (*) begin
    ap_predicate_op125_read_state6 = ((brmerge_i_i_i_i_fu_402_p2 == 1'd0) & (exitcond_i_fu_388_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign brmerge_i_i_i_i_fu_402_p2 = (sof_1_i_i_i_i_fu_136 | ap_phi_mux_eol_i_i_i_i_phi_fu_251_p4);

assign exitcond_i_fu_388_p2 = ((j_i_i_i_i_reg_259 == tmp_i_reg_467) ? 1'b1 : 1'b0);

assign exitcond_i_i_i_i_fu_377_p2 = ((i_i_i_i_i_reg_214 == tmp_i_i_i_i_reg_437) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_347_ap_start = grp_reg_unsigned_short_s_fu_347_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_347_in_r = HwReg_height[11:0];

assign grp_reg_unsigned_short_s_fu_353_ap_start = grp_reg_unsigned_short_s_fu_353_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_353_in_r = HwReg_width[11:0];

assign i_fu_382_p2 = (i_i_i_i_i_reg_214 + 12'd1);

assign imgBayer_V_val_0_V1_status = (imgBayer_V_val_1_V_full_n & imgBayer_V_val_0_V_full_n);

assign imgBayer_V_val_0_V_din = tmp_val_0_V_reg_494;

assign imgBayer_V_val_0_V_write = imgBayer_V_val_0_V1_update;

assign imgBayer_V_val_1_V_din = tmp_val_1_V_reg_499;

assign imgBayer_V_val_1_V_write = imgBayer_V_val_0_V1_update;

assign j_fu_393_p2 = (j_i_i_i_i_reg_259 + 11'd1);

assign s_axis_video_TREADY = s_axis_video_V_dest_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_ack_in = s_axis_video_V_data_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_load_A = (s_axis_video_V_data_V_0_state_cmp_full & ~s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_load_B = (s_axis_video_V_data_V_0_state_cmp_full & s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_sel = s_axis_video_V_data_V_0_sel_rd;

assign s_axis_video_V_data_V_0_state_cmp_full = ((s_axis_video_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_data_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_data_V_0_vld_out = s_axis_video_V_data_V_0_state[1'd0];

assign s_axis_video_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_ack_in = s_axis_video_V_last_V_0_state[1'd1];

assign s_axis_video_V_last_V_0_load_A = (s_axis_video_V_last_V_0_state_cmp_full & ~s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_load_B = (s_axis_video_V_last_V_0_state_cmp_full & s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_sel = s_axis_video_V_last_V_0_sel_rd;

assign s_axis_video_V_last_V_0_state_cmp_full = ((s_axis_video_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_last_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_vld_out = s_axis_video_V_last_V_0_state[1'd0];

assign s_axis_video_V_user_V_0_ack_in = s_axis_video_V_user_V_0_state[1'd1];

assign s_axis_video_V_user_V_0_load_A = (s_axis_video_V_user_V_0_state_cmp_full & ~s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_load_B = (s_axis_video_V_user_V_0_state_cmp_full & s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_sel = s_axis_video_V_user_V_0_sel_rd;

assign s_axis_video_V_user_V_0_state_cmp_full = ((s_axis_video_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_user_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_user_V_0_vld_out = s_axis_video_V_user_V_0_state[1'd0];

assign start_out = real_start;

assign tmp_user_V_fu_359_p1 = s_axis_video_V_user_V_0_data_out;

assign tmp_val_0_V_fu_408_p1 = ap_phi_mux_p_Val2_s_phi_fu_287_p4[7:0];

endmodule //video_crop_bd_v_demosaic_0_0_AXIvideo2MultiBayer3
