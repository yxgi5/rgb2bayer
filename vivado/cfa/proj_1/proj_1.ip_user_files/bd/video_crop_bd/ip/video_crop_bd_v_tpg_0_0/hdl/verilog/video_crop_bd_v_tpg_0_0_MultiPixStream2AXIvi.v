// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module video_crop_bd_v_tpg_0_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        strmPix_V_val_0_V_dout,
        strmPix_V_val_0_V_empty_n,
        strmPix_V_val_0_V_read,
        strmPix_V_val_1_V_dout,
        strmPix_V_val_1_V_empty_n,
        strmPix_V_val_1_V_read,
        strmPix_V_val_2_V_dout,
        strmPix_V_val_2_V_empty_n,
        strmPix_V_val_2_V_read,
        strmPix_V_val_3_V_dout,
        strmPix_V_val_3_V_empty_n,
        strmPix_V_val_3_V_read,
        strmPix_V_val_4_V_dout,
        strmPix_V_val_4_V_empty_n,
        strmPix_V_val_4_V_read,
        strmPix_V_val_5_V_dout,
        strmPix_V_val_5_V_empty_n,
        strmPix_V_val_5_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height,
        WidthOut,
        colorFormat,
        fid_in,
        fid,
        fid_ap_vld,
        field_id
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [9:0] strmPix_V_val_0_V_dout;
input   strmPix_V_val_0_V_empty_n;
output   strmPix_V_val_0_V_read;
input  [9:0] strmPix_V_val_1_V_dout;
input   strmPix_V_val_1_V_empty_n;
output   strmPix_V_val_1_V_read;
input  [9:0] strmPix_V_val_2_V_dout;
input   strmPix_V_val_2_V_empty_n;
output   strmPix_V_val_2_V_read;
input  [9:0] strmPix_V_val_3_V_dout;
input   strmPix_V_val_3_V_empty_n;
output   strmPix_V_val_3_V_read;
input  [9:0] strmPix_V_val_4_V_dout;
input   strmPix_V_val_4_V_empty_n;
output   strmPix_V_val_4_V_read;
input  [9:0] strmPix_V_val_5_V_dout;
input   strmPix_V_val_5_V_empty_n;
output   strmPix_V_val_5_V_read;
output  [63:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [7:0] m_axis_video_TKEEP;
output  [7:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] Height;
input  [15:0] WidthOut;
input  [7:0] colorFormat;
input   fid_in;
output   fid;
output   fid_ap_vld;
input  [15:0] field_id;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fid;
reg fid_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] AXI_video_strm_V_data_V_1_data_out;
reg    AXI_video_strm_V_data_V_1_vld_in;
wire    AXI_video_strm_V_data_V_1_vld_out;
wire    AXI_video_strm_V_data_V_1_ack_in;
wire    AXI_video_strm_V_data_V_1_ack_out;
reg   [63:0] AXI_video_strm_V_data_V_1_payload_A;
reg   [63:0] AXI_video_strm_V_data_V_1_payload_B;
reg    AXI_video_strm_V_data_V_1_sel_rd;
reg    AXI_video_strm_V_data_V_1_sel_wr;
wire    AXI_video_strm_V_data_V_1_sel;
wire    AXI_video_strm_V_data_V_1_load_A;
wire    AXI_video_strm_V_data_V_1_load_B;
reg   [1:0] AXI_video_strm_V_data_V_1_state;
wire    AXI_video_strm_V_data_V_1_state_cmp_full;
wire   [7:0] AXI_video_strm_V_keep_V_1_data_out;
reg    AXI_video_strm_V_keep_V_1_vld_in;
wire    AXI_video_strm_V_keep_V_1_vld_out;
wire    AXI_video_strm_V_keep_V_1_ack_in;
wire    AXI_video_strm_V_keep_V_1_ack_out;
reg    AXI_video_strm_V_keep_V_1_sel_rd;
wire    AXI_video_strm_V_keep_V_1_sel;
reg   [1:0] AXI_video_strm_V_keep_V_1_state;
wire   [7:0] AXI_video_strm_V_strb_V_1_data_out;
reg    AXI_video_strm_V_strb_V_1_vld_in;
wire    AXI_video_strm_V_strb_V_1_vld_out;
wire    AXI_video_strm_V_strb_V_1_ack_in;
wire    AXI_video_strm_V_strb_V_1_ack_out;
reg    AXI_video_strm_V_strb_V_1_sel_rd;
wire    AXI_video_strm_V_strb_V_1_sel;
reg   [1:0] AXI_video_strm_V_strb_V_1_state;
reg   [0:0] AXI_video_strm_V_user_V_1_data_out;
reg    AXI_video_strm_V_user_V_1_vld_in;
wire    AXI_video_strm_V_user_V_1_vld_out;
wire    AXI_video_strm_V_user_V_1_ack_in;
wire    AXI_video_strm_V_user_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_B;
reg    AXI_video_strm_V_user_V_1_sel_rd;
reg    AXI_video_strm_V_user_V_1_sel_wr;
wire    AXI_video_strm_V_user_V_1_sel;
wire    AXI_video_strm_V_user_V_1_load_A;
wire    AXI_video_strm_V_user_V_1_load_B;
reg   [1:0] AXI_video_strm_V_user_V_1_state;
wire    AXI_video_strm_V_user_V_1_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_1_data_out;
reg    AXI_video_strm_V_last_V_1_vld_in;
wire    AXI_video_strm_V_last_V_1_vld_out;
wire    AXI_video_strm_V_last_V_1_ack_in;
wire    AXI_video_strm_V_last_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_B;
reg    AXI_video_strm_V_last_V_1_sel_rd;
reg    AXI_video_strm_V_last_V_1_sel_wr;
wire    AXI_video_strm_V_last_V_1_sel;
wire    AXI_video_strm_V_last_V_1_load_A;
wire    AXI_video_strm_V_last_V_1_load_B;
reg   [1:0] AXI_video_strm_V_last_V_1_state;
wire    AXI_video_strm_V_last_V_1_state_cmp_full;
wire   [0:0] AXI_video_strm_V_id_V_1_data_out;
reg    AXI_video_strm_V_id_V_1_vld_in;
wire    AXI_video_strm_V_id_V_1_vld_out;
wire    AXI_video_strm_V_id_V_1_ack_in;
wire    AXI_video_strm_V_id_V_1_ack_out;
reg    AXI_video_strm_V_id_V_1_sel_rd;
wire    AXI_video_strm_V_id_V_1_sel;
reg   [1:0] AXI_video_strm_V_id_V_1_state;
wire   [0:0] AXI_video_strm_V_dest_V_1_data_out;
reg    AXI_video_strm_V_dest_V_1_vld_in;
wire    AXI_video_strm_V_dest_V_1_vld_out;
wire    AXI_video_strm_V_dest_V_1_ack_in;
wire    AXI_video_strm_V_dest_V_1_ack_out;
reg    AXI_video_strm_V_dest_V_1_sel_rd;
wire    AXI_video_strm_V_dest_V_1_sel;
reg   [1:0] AXI_video_strm_V_dest_V_1_state;
reg    strmPix_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_804;
reg    strmPix_V_val_1_V_blk_n;
reg    strmPix_V_val_2_V_blk_n;
reg    strmPix_V_val_3_V_blk_n;
reg    strmPix_V_val_4_V_blk_n;
reg    strmPix_V_val_5_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_804_pp0_iter1_reg;
reg   [11:0] j_reg_317;
reg    ap_block_state1;
wire   [15:0] field_id_read_read_fu_234_p2;
wire    ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_394_ap_ready;
wire    grp_reg_unsigned_short_s_fu_394_ap_done;
wire    grp_reg_unsigned_short_s_fu_400_ap_ready;
wire    grp_reg_unsigned_short_s_fu_400_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [7:0] colorFormat_read_read_fu_246_p2;
wire   [12:0] tmp_150_fu_411_p1;
reg   [12:0] tmp_150_reg_770;
wire   [11:0] tmp_146_cast_fu_415_p4;
reg   [11:0] tmp_146_cast_reg_775;
wire  signed [12:0] tmp_147_cast_fu_431_p1;
reg  signed [12:0] tmp_147_cast_reg_780;
wire   [0:0] fid_toggle_fu_435_p1;
reg   [0:0] fid_toggle_reg_785;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
wire   [0:0] exitcond1_fu_443_p2;
wire   [11:0] i_1_fu_448_p2;
reg   [11:0] i_1_reg_794;
wire   [0:0] fid_toggle_1_fu_454_p2;
reg   [0:0] fid_toggle_1_reg_799;
wire   [0:0] exitcond_fu_464_p2;
wire    ap_block_state4_pp0_stage0_iter0;
wire    strmPix_V_val_0_V0_status;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] j_1_fu_469_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_475_p2;
reg   [0:0] tmp_last_V_reg_813;
wire   [63:0] cast_fu_730_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    grp_reg_unsigned_short_s_fu_394_ap_start;
wire    grp_reg_unsigned_short_s_fu_394_ap_idle;
wire   [15:0] grp_reg_unsigned_short_s_fu_394_ap_return;
wire    grp_reg_unsigned_short_s_fu_400_ap_start;
wire    grp_reg_unsigned_short_s_fu_400_ap_idle;
wire   [15:0] grp_reg_unsigned_short_s_fu_400_ap_return;
reg   [11:0] i_reg_306;
wire    ap_CS_fsm_state7;
reg   [59:0] ap_phi_mux_p_0160_0_2_phi_fu_331_p6;
wire   [59:0] p_Result_4_fu_522_p3;
wire   [59:0] ap_phi_reg_pp0_iter1_p_0160_0_2_reg_328;
wire   [59:0] p_Result_3_fu_504_p3;
wire   [59:0] p_Result_s_fu_513_p3;
reg   [59:0] ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6;
wire   [59:0] p_Result_4_0_1_fu_557_p5;
wire   [59:0] ap_phi_reg_pp0_iter1_p_0160_0_2_0_1_reg_339;
wire   [59:0] p_Result_3_0_1_fu_531_p5;
wire   [59:0] p_Result_0_1_fu_544_p5;
reg   [59:0] ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6;
wire   [59:0] p_Result_4_0_2_fu_596_p5;
wire   [59:0] ap_phi_reg_pp0_iter1_p_0160_0_2_0_2_reg_350;
wire   [59:0] p_Result_3_0_2_fu_570_p5;
wire   [59:0] p_Result_0_2_fu_583_p5;
reg   [59:0] ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6;
wire   [59:0] p_Result_4_1_fu_635_p5;
wire   [59:0] ap_phi_reg_pp0_iter1_p_0160_0_2_1_reg_361;
wire   [59:0] p_Result_3_1_fu_609_p5;
wire   [59:0] p_Result_1_fu_622_p5;
reg   [59:0] ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6;
wire   [59:0] p_Result_4_1_1_fu_674_p5;
wire   [59:0] ap_phi_reg_pp0_iter1_p_0160_0_2_1_1_reg_372;
wire   [59:0] p_Result_3_1_1_fu_648_p5;
wire   [59:0] p_Result_1_1_fu_661_p5;
reg   [59:0] ap_phi_mux_tmp_data_V_phi_fu_386_p6;
wire   [59:0] p_Result_4_1_2_fu_713_p5;
wire   [59:0] ap_phi_reg_pp0_iter1_tmp_data_V_reg_383;
wire   [59:0] p_Result_3_1_2_fu_687_p5;
wire   [59:0] p_Result_1_2_fu_700_p5;
reg    grp_reg_unsigned_short_s_fu_394_ap_start_reg;
reg    ap_block_state1_ignore_call13;
reg    grp_reg_unsigned_short_s_fu_400_ap_start_reg;
reg    ap_block_state1_ignore_call14;
reg    strmPix_V_val_0_V0_update;
reg   [0:0] tmp_user_V_fu_218;
reg    fid_preg;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] tmp_133_fu_425_p2;
wire   [12:0] i_cast_fu_439_p1;
wire   [12:0] j_cast_fu_460_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_482;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 AXI_video_strm_V_data_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_1_state = 2'd0;
#0 AXI_video_strm_V_keep_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_keep_V_1_state = 2'd0;
#0 AXI_video_strm_V_strb_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_strb_V_1_state = 2'd0;
#0 AXI_video_strm_V_user_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_1_state = 2'd0;
#0 AXI_video_strm_V_last_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_1_state = 2'd0;
#0 AXI_video_strm_V_id_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_id_V_1_state = 2'd0;
#0 AXI_video_strm_V_dest_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_394_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_400_ap_start_reg = 1'b0;
#0 fid_preg = 1'b0;
end

video_crop_bd_v_tpg_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_394(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_394_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_394_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_394_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_394_ap_ready),
    .in_r(Height),
    .ap_return(grp_reg_unsigned_short_s_fu_394_ap_return)
);

video_crop_bd_v_tpg_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_400(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_400_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_400_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_400_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_400_ap_ready),
    .in_r(WidthOut),
    .ap_return(grp_reg_unsigned_short_s_fu_400_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_out))) begin
            AXI_video_strm_V_data_V_1_sel_rd <= ~AXI_video_strm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_in) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in))) begin
            AXI_video_strm_V_data_V_1_sel_wr <= ~AXI_video_strm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_data_V_1_state)) | ((2'd1 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_out))) begin
            AXI_video_strm_V_dest_V_1_sel_rd <= ~AXI_video_strm_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_dest_V_1_state)) | ((2'd1 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_out))) begin
            AXI_video_strm_V_id_V_1_sel_rd <= ~AXI_video_strm_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_id_V_1_state)) | ((2'd1 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_out))) begin
            AXI_video_strm_V_keep_V_1_sel_rd <= ~AXI_video_strm_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_keep_V_1_state)) | ((2'd1 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_out))) begin
            AXI_video_strm_V_last_V_1_sel_rd <= ~AXI_video_strm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_in) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in))) begin
            AXI_video_strm_V_last_V_1_sel_wr <= ~AXI_video_strm_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_last_V_1_state)) | ((2'd1 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_out))) begin
            AXI_video_strm_V_strb_V_1_sel_rd <= ~AXI_video_strm_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_strb_V_1_state)) | ((2'd1 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_out))) begin
            AXI_video_strm_V_user_V_1_sel_rd <= ~AXI_video_strm_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_in) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in))) begin
            AXI_video_strm_V_user_V_1_sel_wr <= ~AXI_video_strm_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_user_V_1_state)) | ((2'd1 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        fid_preg <= 1'b0;
    end else begin
        if (((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (field_id_read_read_fu_234_p2 == 16'd4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            fid_preg <= fid_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_394_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_394_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_394_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_394_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_400_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_400_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_400_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_400_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_306 <= i_1_reg_794;
    end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_306 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_317 <= 12'd0;
    end else if (((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_317 <= j_1_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_218 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_218 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_A)) begin
        AXI_video_strm_V_data_V_1_payload_A <= cast_fu_730_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_B)) begin
        AXI_video_strm_V_data_V_1_payload_B <= cast_fu_730_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_A)) begin
        AXI_video_strm_V_last_V_1_payload_A <= tmp_last_V_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_B)) begin
        AXI_video_strm_V_last_V_1_payload_B <= tmp_last_V_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_A)) begin
        AXI_video_strm_V_user_V_1_payload_A <= tmp_user_V_fu_218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_B)) begin
        AXI_video_strm_V_user_V_1_payload_B <= tmp_user_V_fu_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_804 <= exitcond_fu_464_p2;
        exitcond_reg_804_pp0_iter1_reg <= exitcond_reg_804;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fid_toggle_1_reg_799 <= fid_toggle_1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state3))) begin
        fid_toggle_reg_785 <= fid_toggle_fu_435_p1;
        i_1_reg_794 <= i_1_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_146_cast_reg_775 <= {{grp_reg_unsigned_short_s_fu_400_ap_return[12:1]}};
        tmp_147_cast_reg_780 <= tmp_147_cast_fu_431_p1;
        tmp_150_reg_770 <= tmp_150_fu_411_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_813 <= tmp_last_V_fu_475_p2;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_sel)) begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_B;
    end else begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_sel)) begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_B;
    end else begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_sel)) begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_B;
    end else begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_464_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_482)) begin
        if ((colorFormat_read_read_fu_246_p2 == 8'd0)) begin
            ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6 = p_Result_0_1_fu_544_p5;
        end else if ((colorFormat_read_read_fu_246_p2 == 8'd1)) begin
            ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6 = p_Result_3_0_1_fu_531_p5;
        end else if ((~(colorFormat_read_read_fu_246_p2 == 8'd1) & ~(colorFormat_read_read_fu_246_p2 == 8'd0))) begin
            ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6 = p_Result_4_0_1_fu_557_p5;
        end else begin
            ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_0_1_reg_339;
        end
    end else begin
        ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_0_1_reg_339;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_482)) begin
        if ((colorFormat_read_read_fu_246_p2 == 8'd0)) begin
            ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6 = p_Result_0_2_fu_583_p5;
        end else if ((colorFormat_read_read_fu_246_p2 == 8'd1)) begin
            ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6 = p_Result_3_0_2_fu_570_p5;
        end else if ((~(colorFormat_read_read_fu_246_p2 == 8'd1) & ~(colorFormat_read_read_fu_246_p2 == 8'd0))) begin
            ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6 = p_Result_4_0_2_fu_596_p5;
        end else begin
            ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_0_2_reg_350;
        end
    end else begin
        ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_0_2_reg_350;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_482)) begin
        if ((colorFormat_read_read_fu_246_p2 == 8'd0)) begin
            ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6 = p_Result_1_1_fu_661_p5;
        end else if ((colorFormat_read_read_fu_246_p2 == 8'd1)) begin
            ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6 = p_Result_3_1_1_fu_648_p5;
        end else if ((~(colorFormat_read_read_fu_246_p2 == 8'd1) & ~(colorFormat_read_read_fu_246_p2 == 8'd0))) begin
            ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6 = p_Result_4_1_1_fu_674_p5;
        end else begin
            ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_1_1_reg_372;
        end
    end else begin
        ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_1_1_reg_372;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_482)) begin
        if ((colorFormat_read_read_fu_246_p2 == 8'd0)) begin
            ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6 = p_Result_1_fu_622_p5;
        end else if ((colorFormat_read_read_fu_246_p2 == 8'd1)) begin
            ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6 = p_Result_3_1_fu_609_p5;
        end else if ((~(colorFormat_read_read_fu_246_p2 == 8'd1) & ~(colorFormat_read_read_fu_246_p2 == 8'd0))) begin
            ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6 = p_Result_4_1_fu_635_p5;
        end else begin
            ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_1_reg_361;
        end
    end else begin
        ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_1_reg_361;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_482)) begin
        if ((colorFormat_read_read_fu_246_p2 == 8'd0)) begin
            ap_phi_mux_p_0160_0_2_phi_fu_331_p6 = p_Result_s_fu_513_p3;
        end else if ((colorFormat_read_read_fu_246_p2 == 8'd1)) begin
            ap_phi_mux_p_0160_0_2_phi_fu_331_p6 = p_Result_3_fu_504_p3;
        end else if ((~(colorFormat_read_read_fu_246_p2 == 8'd1) & ~(colorFormat_read_read_fu_246_p2 == 8'd0))) begin
            ap_phi_mux_p_0160_0_2_phi_fu_331_p6 = p_Result_4_fu_522_p3;
        end else begin
            ap_phi_mux_p_0160_0_2_phi_fu_331_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_reg_328;
        end
    end else begin
        ap_phi_mux_p_0160_0_2_phi_fu_331_p6 = ap_phi_reg_pp0_iter1_p_0160_0_2_reg_328;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_482)) begin
        if ((colorFormat_read_read_fu_246_p2 == 8'd0)) begin
            ap_phi_mux_tmp_data_V_phi_fu_386_p6 = p_Result_1_2_fu_700_p5;
        end else if ((colorFormat_read_read_fu_246_p2 == 8'd1)) begin
            ap_phi_mux_tmp_data_V_phi_fu_386_p6 = p_Result_3_1_2_fu_687_p5;
        end else if ((~(colorFormat_read_read_fu_246_p2 == 8'd1) & ~(colorFormat_read_read_fu_246_p2 == 8'd0))) begin
            ap_phi_mux_tmp_data_V_phi_fu_386_p6 = p_Result_4_1_2_fu_713_p5;
        end else begin
            ap_phi_mux_tmp_data_V_phi_fu_386_p6 = ap_phi_reg_pp0_iter1_tmp_data_V_reg_383;
        end
    end else begin
        ap_phi_mux_tmp_data_V_phi_fu_386_p6 = ap_phi_reg_pp0_iter1_tmp_data_V_reg_383;
    end
end

always @ (*) begin
    if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (field_id_read_read_fu_234_p2 == 16'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fid = 1'd1;
    end else if (((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (field_id_read_read_fu_234_p2 == 16'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fid = fid_toggle_reg_785;
    end else if (((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (field_id_read_read_fu_234_p2 == 16'd3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fid = fid_toggle_1_reg_799;
    end else if (((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (field_id_read_read_fu_234_p2 == 16'd4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fid = fid_in;
    end else if ((((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | (~(field_id_read_read_fu_234_p2 == 16'd0) & ~(field_id_read_read_fu_234_p2 == 16'd2) & ~(field_id_read_read_fu_234_p2 == 16'd1) & ~(field_id_read_read_fu_234_p2 == 16'd3) & ~(field_id_read_read_fu_234_p2 == 16'd4) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (field_id_read_read_fu_234_p2 == 16'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        fid = 1'd0;
    end else begin
        fid = fid_preg;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | (~(field_id_read_read_fu_234_p2 == 16'd0) & ~(field_id_read_read_fu_234_p2 == 16'd2) & ~(field_id_read_read_fu_234_p2 == 16'd1) & ~(field_id_read_read_fu_234_p2 == 16'd3) & ~(field_id_read_read_fu_234_p2 == 16'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (field_id_read_read_fu_234_p2 == 16'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (field_id_read_read_fu_234_p2 == 16'd2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (field_id_read_read_fu_234_p2 == 16'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (field_id_read_read_fu_234_p2 == 16'd3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond_fu_464_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (field_id_read_read_fu_234_p2 == 16'd4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fid_ap_vld = 1'b1;
    end else begin
        fid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_reg_804_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = AXI_video_strm_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_0_V0_update = 1'b1;
    end else begin
        strmPix_V_val_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_0_V_blk_n = strmPix_V_val_0_V_empty_n;
    end else begin
        strmPix_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_1_V_blk_n = strmPix_V_val_1_V_empty_n;
    end else begin
        strmPix_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_2_V_blk_n = strmPix_V_val_2_V_empty_n;
    end else begin
        strmPix_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_3_V_blk_n = strmPix_V_val_3_V_empty_n;
    end else begin
        strmPix_V_val_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_4_V_blk_n = strmPix_V_val_4_V_empty_n;
    end else begin
        strmPix_V_val_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_5_V_blk_n = strmPix_V_val_5_V_empty_n;
    end else begin
        strmPix_V_val_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in)) & (exitcond1_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_464_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_464_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_1_ack_in = AXI_video_strm_V_data_V_1_state[1'd1];

assign AXI_video_strm_V_data_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_data_V_1_load_A = (~AXI_video_strm_V_data_V_1_sel_wr & AXI_video_strm_V_data_V_1_state_cmp_full);

assign AXI_video_strm_V_data_V_1_load_B = (AXI_video_strm_V_data_V_1_state_cmp_full & AXI_video_strm_V_data_V_1_sel_wr);

assign AXI_video_strm_V_data_V_1_sel = AXI_video_strm_V_data_V_1_sel_rd;

assign AXI_video_strm_V_data_V_1_state_cmp_full = ((AXI_video_strm_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_1_vld_out = AXI_video_strm_V_data_V_1_state[1'd0];

assign AXI_video_strm_V_dest_V_1_ack_in = AXI_video_strm_V_dest_V_1_state[1'd1];

assign AXI_video_strm_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_dest_V_1_data_out = 1'd0;

assign AXI_video_strm_V_dest_V_1_sel = AXI_video_strm_V_dest_V_1_sel_rd;

assign AXI_video_strm_V_dest_V_1_vld_out = AXI_video_strm_V_dest_V_1_state[1'd0];

assign AXI_video_strm_V_id_V_1_ack_in = AXI_video_strm_V_id_V_1_state[1'd1];

assign AXI_video_strm_V_id_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_id_V_1_data_out = 1'd0;

assign AXI_video_strm_V_id_V_1_sel = AXI_video_strm_V_id_V_1_sel_rd;

assign AXI_video_strm_V_id_V_1_vld_out = AXI_video_strm_V_id_V_1_state[1'd0];

assign AXI_video_strm_V_keep_V_1_ack_in = AXI_video_strm_V_keep_V_1_state[1'd1];

assign AXI_video_strm_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_keep_V_1_data_out = 8'd255;

assign AXI_video_strm_V_keep_V_1_sel = AXI_video_strm_V_keep_V_1_sel_rd;

assign AXI_video_strm_V_keep_V_1_vld_out = AXI_video_strm_V_keep_V_1_state[1'd0];

assign AXI_video_strm_V_last_V_1_ack_in = AXI_video_strm_V_last_V_1_state[1'd1];

assign AXI_video_strm_V_last_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_last_V_1_load_A = (~AXI_video_strm_V_last_V_1_sel_wr & AXI_video_strm_V_last_V_1_state_cmp_full);

assign AXI_video_strm_V_last_V_1_load_B = (AXI_video_strm_V_last_V_1_state_cmp_full & AXI_video_strm_V_last_V_1_sel_wr);

assign AXI_video_strm_V_last_V_1_sel = AXI_video_strm_V_last_V_1_sel_rd;

assign AXI_video_strm_V_last_V_1_state_cmp_full = ((AXI_video_strm_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_1_vld_out = AXI_video_strm_V_last_V_1_state[1'd0];

assign AXI_video_strm_V_strb_V_1_ack_in = AXI_video_strm_V_strb_V_1_state[1'd1];

assign AXI_video_strm_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_strb_V_1_data_out = 8'd0;

assign AXI_video_strm_V_strb_V_1_sel = AXI_video_strm_V_strb_V_1_sel_rd;

assign AXI_video_strm_V_strb_V_1_vld_out = AXI_video_strm_V_strb_V_1_state[1'd0];

assign AXI_video_strm_V_user_V_1_ack_in = AXI_video_strm_V_user_V_1_state[1'd1];

assign AXI_video_strm_V_user_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_user_V_1_load_A = (~AXI_video_strm_V_user_V_1_sel_wr & AXI_video_strm_V_user_V_1_state_cmp_full);

assign AXI_video_strm_V_user_V_1_load_B = (AXI_video_strm_V_user_V_1_state_cmp_full & AXI_video_strm_V_user_V_1_sel_wr);

assign AXI_video_strm_V_user_V_1_sel = AXI_video_strm_V_user_V_1_sel_rd;

assign AXI_video_strm_V_user_V_1_state_cmp_full = ((AXI_video_strm_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_1_vld_out = AXI_video_strm_V_user_V_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_804 == 1'd0) & (strmPix_V_val_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((exitcond_reg_804 == 1'd0) & (strmPix_V_val_0_V0_status == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((exitcond_reg_804 == 1'd0) & (strmPix_V_val_0_V0_status == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call13 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call14 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_400_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_394_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((1'b0 == AXI_video_strm_V_data_V_1_ack_in) | (1'b0 == AXI_video_strm_V_dest_V_1_ack_in) | (1'b0 == AXI_video_strm_V_id_V_1_ack_in) | (1'b0 == AXI_video_strm_V_last_V_1_ack_in) | (1'b0 == AXI_video_strm_V_user_V_1_ack_in) | (1'b0 == AXI_video_strm_V_strb_V_1_ack_in) | (1'b0 == AXI_video_strm_V_keep_V_1_ack_in));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond_reg_804 == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((exitcond_reg_804 == 1'd0) & (strmPix_V_val_0_V0_status == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((exitcond_reg_804_pp0_iter1_reg == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_482 = ((exitcond_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_p_0160_0_2_0_1_reg_339 = 'bx;

assign ap_phi_reg_pp0_iter1_p_0160_0_2_0_2_reg_350 = 'bx;

assign ap_phi_reg_pp0_iter1_p_0160_0_2_1_1_reg_372 = 'bx;

assign ap_phi_reg_pp0_iter1_p_0160_0_2_1_reg_361 = 'bx;

assign ap_phi_reg_pp0_iter1_p_0160_0_2_reg_328 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_data_V_reg_383 = 'bx;

assign cast_fu_730_p1 = ap_phi_mux_tmp_data_V_phi_fu_386_p6;

assign colorFormat_read_read_fu_246_p2 = colorFormat;

assign exitcond1_fu_443_p2 = ((i_cast_fu_439_p1 == tmp_150_reg_770) ? 1'b1 : 1'b0);

assign exitcond_fu_464_p2 = ((j_reg_317 == tmp_146_cast_reg_775) ? 1'b1 : 1'b0);

assign fid_toggle_1_fu_454_p2 = (fid_toggle_fu_435_p1 ^ 1'd1);

assign fid_toggle_fu_435_p1 = i_reg_306[0:0];

assign field_id_read_read_fu_234_p2 = field_id;

assign grp_reg_unsigned_short_s_fu_394_ap_start = grp_reg_unsigned_short_s_fu_394_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_400_ap_start = grp_reg_unsigned_short_s_fu_400_ap_start_reg;

assign i_1_fu_448_p2 = (12'd1 + i_reg_306);

assign i_cast_fu_439_p1 = i_reg_306;

assign j_1_fu_469_p2 = (j_reg_317 + 12'd1);

assign j_cast_fu_460_p1 = j_reg_317;

assign m_axis_video_TDATA = AXI_video_strm_V_data_V_1_data_out;

assign m_axis_video_TDEST = AXI_video_strm_V_dest_V_1_data_out;

assign m_axis_video_TID = AXI_video_strm_V_id_V_1_data_out;

assign m_axis_video_TKEEP = AXI_video_strm_V_keep_V_1_data_out;

assign m_axis_video_TLAST = AXI_video_strm_V_last_V_1_data_out;

assign m_axis_video_TSTRB = AXI_video_strm_V_strb_V_1_data_out;

assign m_axis_video_TUSER = AXI_video_strm_V_user_V_1_data_out;

assign m_axis_video_TVALID = AXI_video_strm_V_dest_V_1_state[1'd0];

assign p_Result_0_1_fu_544_p5 = {{ap_phi_mux_p_0160_0_2_phi_fu_331_p6[59:20]}, {strmPix_V_val_2_V_dout}, {ap_phi_mux_p_0160_0_2_phi_fu_331_p6[9:0]}};

assign p_Result_0_2_fu_583_p5 = {{ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6[59:30]}, {strmPix_V_val_0_V_dout}, {ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6[19:0]}};

assign p_Result_1_1_fu_661_p5 = {{ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6[59:50]}, {strmPix_V_val_5_V_dout}, {ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6[39:0]}};

assign p_Result_1_2_fu_700_p5 = {{strmPix_V_val_3_V_dout}, {ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6[49:0]}};

assign p_Result_1_fu_622_p5 = {{ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6[59:40]}, {strmPix_V_val_4_V_dout}, {ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6[29:0]}};

assign p_Result_3_0_1_fu_531_p5 = {{ap_phi_mux_p_0160_0_2_phi_fu_331_p6[59:20]}, {strmPix_V_val_1_V_dout}, {ap_phi_mux_p_0160_0_2_phi_fu_331_p6[9:0]}};

assign p_Result_3_0_2_fu_570_p5 = {{ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6[59:30]}, {strmPix_V_val_2_V_dout}, {ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6[19:0]}};

assign p_Result_3_1_1_fu_648_p5 = {{ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6[59:50]}, {strmPix_V_val_4_V_dout}, {ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6[39:0]}};

assign p_Result_3_1_2_fu_687_p5 = {{strmPix_V_val_5_V_dout}, {ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6[49:0]}};

assign p_Result_3_1_fu_609_p5 = {{ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6[59:40]}, {strmPix_V_val_3_V_dout}, {ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6[29:0]}};

assign p_Result_3_fu_504_p3 = {{50'd1125899906842623}, {strmPix_V_val_0_V_dout}};

assign p_Result_4_0_1_fu_557_p5 = {{ap_phi_mux_p_0160_0_2_phi_fu_331_p6[59:20]}, {strmPix_V_val_1_V_dout}, {ap_phi_mux_p_0160_0_2_phi_fu_331_p6[9:0]}};

assign p_Result_4_0_2_fu_596_p5 = {{ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6[59:30]}, {strmPix_V_val_3_V_dout}, {ap_phi_mux_p_0160_0_2_0_1_phi_fu_342_p6[19:0]}};

assign p_Result_4_1_1_fu_674_p5 = {{ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6[59:50]}, {strmPix_V_val_5_V_dout}, {ap_phi_mux_p_0160_0_2_1_phi_fu_364_p6[39:0]}};

assign p_Result_4_1_2_fu_713_p5 = {{strmPix_V_val_2_V_dout}, {ap_phi_mux_p_0160_0_2_1_1_phi_fu_375_p6[49:0]}};

assign p_Result_4_1_fu_635_p5 = {{ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6[59:40]}, {strmPix_V_val_4_V_dout}, {ap_phi_mux_p_0160_0_2_0_2_phi_fu_353_p6[29:0]}};

assign p_Result_4_fu_522_p3 = {{50'd1125899906842623}, {strmPix_V_val_0_V_dout}};

assign p_Result_s_fu_513_p3 = {{50'd1125899906842623}, {strmPix_V_val_1_V_dout}};

assign strmPix_V_val_0_V0_status = (strmPix_V_val_5_V_empty_n & strmPix_V_val_4_V_empty_n & strmPix_V_val_3_V_empty_n & strmPix_V_val_2_V_empty_n & strmPix_V_val_1_V_empty_n & strmPix_V_val_0_V_empty_n);

assign strmPix_V_val_0_V_read = strmPix_V_val_0_V0_update;

assign strmPix_V_val_1_V_read = strmPix_V_val_0_V0_update;

assign strmPix_V_val_2_V_read = strmPix_V_val_0_V0_update;

assign strmPix_V_val_3_V_read = strmPix_V_val_0_V0_update;

assign strmPix_V_val_4_V_read = strmPix_V_val_0_V0_update;

assign strmPix_V_val_5_V_read = strmPix_V_val_0_V0_update;

assign tmp_133_fu_425_p2 = ($signed(12'd4095) + $signed(tmp_146_cast_fu_415_p4));

assign tmp_146_cast_fu_415_p4 = {{grp_reg_unsigned_short_s_fu_400_ap_return[12:1]}};

assign tmp_147_cast_fu_431_p1 = $signed(tmp_133_fu_425_p2);

assign tmp_150_fu_411_p1 = grp_reg_unsigned_short_s_fu_394_ap_return[12:0];

assign tmp_last_V_fu_475_p2 = ((j_cast_fu_460_p1 == tmp_147_cast_reg_780) ? 1'b1 : 1'b0);

endmodule //video_crop_bd_v_tpg_0_0_MultiPixStream2AXIvi
